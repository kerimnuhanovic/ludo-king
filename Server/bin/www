#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('probniprojekat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var rooms = new Map()

const {Server} = require('socket.io')
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  },
})

io.on('connection', (socket) => {
  console.log("USAO")
  console.log(`Client: ${socket.id}`)
  socket.on('posalji', (data) => {
    console.log(data.poruka)
    socket.to(data.room).emit('poruka_svima', data)
  })

  socket.on('create_room', (room) => {
    rooms.set(room, [socket.id])
    socket.join(room)

    console.log(rooms)
    socket.emit('room_exist', {room:room, pnumber: rooms.get(room).length})
  })

  socket.on('join_room', (room) => {
    console.log(room)
    if(rooms.get(room) === undefined) {
      socket.emit('room_404', room)

    }
    else {

      rooms.get(room).push(socket.id)
      console.log(rooms)
      socket.join(room)
      socket.emit('room_exist', {room:room, pnumber: rooms.get(room).length})
    }
  })
  socket.on('join_2', (room) => {
    rooms.get(room).push(socket.id)
    socket.join(room)
    console.log(rooms)
    socket.emit('dodijeli_redni_broj', rooms.get(room).length)
  })
  socket.on('potez', (data) => {
    console.log("POTEZ")
    socket.to(data.room).emit('odigraj', {kocka:data.kocka, potez:data.potez})
  })
  socket.on('potez_klik', (data) => {
    socket.to(data.room).emit('odigraj_klik', {x:data.x,y:data.y})
  })

  socket.on('start', (room) => {
    socket.to(room).emit('start_game')
  })

})
//module.exports = server


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
